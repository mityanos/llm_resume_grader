# Combined project files

# 001 - README.md

# LLM Resume Grader (A‚ÄìD, Aviasales-style)

–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ —Ä–µ–∑—é–º–µ –∏ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º —Å –ø–æ–º–æ—â—å—é OpenAI API –∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —á–µ–∫–ª–∏—Å—Ç–æ–≤ ‚Äî –¥–ª—è —á–µ—Å—Ç–Ω–æ–≥–æ, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–≥–æ –∏ –æ–±—ä—è—Å–Ω–∏–º–æ–≥–æ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –æ—Ç–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –ò–¢-–≤–∞–∫–∞–Ω—Å–∏–∏.

## üü¢ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –≤ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ö

1. **–ó–∞–ø—É—Å—Ç–∏** `python3 main.py`
2. **–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥—ë—Ç –≤—Å–µ —Ä–µ–∑—é–º–µ** –≤ –ø–∞–ø–∫–µ `data/input/candidates/`
3. **–ö–∞–∂–¥–æ–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ–≥–æ–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ LLM (—Å—É–¥—å—é)** ‚Äî –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É (‚ÄúA‚Äù, ‚ÄúB‚Äù, ‚ÄúC‚Äù –∏–ª–∏ ‚ÄúD‚Äù) –∏ –ø–∏—à–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
4. **–û—Ü–µ–Ω–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –≤ —á–∏—Å–ª–æ** (–Ω–∞–ø—Ä–∏–º–µ—Ä, A=4, D=1 ‚Äî —Å–º. config.yaml)
5. **–í—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É**
6. **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è** –≤ —É–¥–æ–±–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ `results.md` (–∏ –≤ –ø–æ–¥—Ä–æ–±–Ω–æ–º JSON)

**–ó–∞–ø—É—Å—Ç–∏–ª ‚Äî –ø–æ–ª—É—á–∏–ª —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –≥–æ—Ç–æ–≤—ã–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–±–æ—Ä–∞!**

---

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

```bash
# 1. –ö–ª–æ–Ω–∏—Ä—É–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
git clone https://github.com/mityanos/llm_resume_grader.git
cd llm_resume_grader

# 2. –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
python3 -m venv .venv
source .venv/bin/activate

# 3. –£—Å—Ç–∞–Ω–æ–≤–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
pip install --upgrade pip
pip install -r requirements.txt

# 4. –î–æ–±–∞–≤—å OpenAI API-–∫–ª—é—á
cp .env.example .env
# –æ—Ç–∫—Ä–æ–π .env –∏ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π –∫–ª—é—á (–ø–æ–ª—É—á–∏ –Ω–∞ https://platform.openai.com/account/api-keys)

# 5. –ü–æ–ª–æ–∂–∏ —Ä–µ–∑—é–º–µ-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –ø–∞–ø–∫—É data/input/candidates/
# —Ñ–æ—Ä–º–∞—Ç—ã —Å–º–æ—Ç—Ä–∏ –Ω–∏–∂–µ

# 6. **–ó–∞–ø—É—Å—Ç–∏ –ø–∞–π–ø–ª–∞–π–Ω**
python -m llm_resume_grader.main

# 7. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –≤ results.md –∏ results.json
```

---

## üóÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è

```
llm_resume_grader/
‚îú‚îÄ‚îÄ data/
‚îÇ   ‚îú‚îÄ‚îÄ input/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ candidates/    # –ø–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—é–º–µ (.md)
‚îÇ   ‚îî‚îÄ‚îÄ output/            # —Ç–∞–±–ª–∏—Ü—ã –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
‚îú‚îÄ‚îÄ config.yaml            # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –∏ pipeline
‚îú‚îÄ‚îÄ requirements.txt       # –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
‚îú‚îÄ‚îÄ system_prompt.md       # —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è LLM
‚îú‚îÄ‚îÄ main.py                # –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
‚îú‚îÄ‚îÄ .env.example           # —à–∞–±–ª–æ–Ω –¥–ª—è API-–∫–ª—é—á–∞
‚îú‚îÄ‚îÄ .gitignore             # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç .env, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
```

---

## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

–í—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ [`config.yaml`](sandbox:/mnt/data/config.yaml):

```yaml
llm:
  model: "gpt-4o-mini-2024-07-18"
  params:
    temperature: 0.2
    top_p: 1.0
    max_tokens: 1000
  retry_max: 6

grading:
  scale: {A: 4, B: 3, C: 2, D: 1}

paths:
  system_prompt: "system_prompt.md"
  candidates_glob: "candidates/*.md"
  out_md: "results.md"
  out_json: "results.json"
```

**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã OpenAI (`temperature`, `top_p`, `max_tokens`) —Ä–µ–≥—É–ª–∏—Ä—É—é—Ç—Å—è –ø—Ä—è–º–æ –∏–∑ YAML** –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –≤ API –≤—ã–∑–æ–≤—ã.

---

## üìÑ –§–æ—Ä–º–∞—Ç —Ä–µ–∑—é–º–µ-–∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (`candidates/*.md`)

–†–µ–∑—é–º–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ Markdown-—Ñ–æ—Ä–º–∞—Ç–µ.
**–í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ!) —É–∫–∞–∑—ã–≤–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π Candidate ID:**

```markdown
Candidate ID: C001
Name: Alex Swift

## Experience
- 8 yrs Backend Lead (FastAPI, PostgreSQL, AWS, Docker, Terraform)
- Drove 0-downtime migration to microservices

## Skills
Python, FastAPI, PostgreSQL, AWS, Docker, CI/CD, Terraform

## Motivation
Want to scale APIs & mentor juniors in a product-driven team.
```

*–ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∏ Candidate ID –Ω–µ—Ç ‚Äî –≤ —Ç–∞–±–ª–∏—Ü—É –ø–æ–ø–∞–¥—ë—Ç –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.*

---

## üß† –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç pipeline

1. **–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤** (`config.yaml`, `.env`).
2. **–ß—Ç–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞** (`system_prompt.md`), –≥–¥–µ –∂—ë—Å—Ç–∫–æ –∑–∞–¥–∞–Ω —á–µ–∫–ª–∏—Å—Ç –æ—Ü–µ–Ω–∫–∏.
3. **–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞**:

   * –°–æ–±–∏—Ä–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –∏ —Ä–µ–∑—é–º–µ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (`system` role).
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ OpenAI Chat API —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–µ–º–ø–ª–∏–Ω–≥–∞.
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç: –±—É–∫–≤–∞-–æ—Ü–µ–Ω–∫–∞, –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –∞ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π raw JSON –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏.

4. **–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**:

   * `results.md` ‚Äî —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–ª–∞–∑–∞–º–∏ (Candidate | Grade | Explanation).
   * `results.json` ‚Äî –ø–æ–¥—Ä–æ–±–Ω—ã–π JSON, –≥–¥–µ raw\_response —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–µ—Å—å —á–µ–∫–ª–∏—Å—Ç, –≤—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏, –æ—Ü–µ–Ω–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ LLM.

---

## üìä –ü—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

### **results.md**

| Candidate | Grade | Explanation                                                                                                     |
| --------- | ----- | --------------------------------------------------------------------------------------------------------------- |
| C001      | A     | –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, –Ω–µ–±–æ–ª—å—à–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ –∫—É–ª—å—Ç—É—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏ |
| C016      | D     | –ö–∞–Ω–¥–∏–¥–∞—Ç –∏–º–µ–µ—Ç –æ–ø—ã—Ç –≤ HR, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç –∏ –Ω–∞–≤—ã–∫–∏, —á—Ç–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Aviasales  |

### **results.json**

```json
[
  {
    "candidate": "C001",
    "grade": "A",
    "score": 4,
    "explanation": "–û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, ...",
    "raw_response": "{...–ø–æ–ª–Ω—ã–π JSON —á–µ–∫–ª–∏—Å—Ç LLM...}"
  },
  ...
]
```

–í –ø–æ–ª–µ `"raw_response"` –ª–µ–∂–∏—Ç –ø–æ–ª–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç —Å —á–µ–∫–ª–∏—Å—Ç–∞–º–∏, –±–∞–ª–ª–∞–º–∏, –ø–ª—é—Å–∞–º–∏/–º–∏–Ω—É—Å–∞–º–∏ ‚Äî –≤—Å—ë, –∫–∞–∫ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç LLM.

---

## üèÜ –ü–æ–¥ –∫–∞–ø–æ—Ç–æ–º: –æ—Ü–µ–Ω–∫–∞ –ø–æ —á–µ–∫–ª–∏—Å—Ç—É (system prompt)

LLM –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–º—Ç —Å —è–≤–Ω—ã–º —á–µ–∫–ª–∏—Å—Ç–æ–º:

* **–û–±—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ (company-fit)**: –æ–ø—ã—Ç, –º–æ—Ç–∏–≤–∞—Ü–∏—è, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ—Å—Ç—å, —Ä–∏—Å–∫–∏/–ø–ª—é—Å—ã –¥–ª—è –∫—É–ª—å—Ç—É—Ä—ã
* **–õ–æ–∫–∞–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ (vacancy-fit)**: –æ–ø—ã—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
* **–°–∫–æ—Ä–∏–Ω–≥**:

  * –ø–æ –∫–∞–∂–¥–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é: ‚Äú–¥–∞‚Äù, ‚Äú–æ—Ç—á–∞—Å—Ç–∏‚Äù, ‚Äú–Ω–µ—Ç‚Äù + –º–∏–∫—Ä–æ-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  * common\_score, local\_score (0‚Äì50), total\_score (0‚Äì100)
  * –ì—Ä–µ–π–¥: A (90‚Äì100), B (75‚Äì89), C (50‚Äì74), D (<50)
  * –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª—é—Å–æ–≤ –∏ –º–∏–Ω—É—Å–æ–≤ –¥–ª—è hiring manager
* **–§–æ—Ä–º–∞—Ç**: –≤–∞–ª–∏–¥–Ω—ã–π JSON (—Å–º. –ø–æ–ª–µ `raw_response`)

**–ü—Ä–∏–º–µ—Ä system\_prompt.md —Å–º–æ—Ç—Ä–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.**

---

## üõ° –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

* **.env** (API-–∫–ª—é—á) **–∏ –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã (results.\*) –∑–∞—â–∏—â–µ–Ω—ã —á–µ—Ä–µ–∑ `.gitignore`** 
* **Pipeline —Ö—Ä–∞–Ω–∏—Ç –∫–ª—é—á –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ**.

---

## ‚ö°Ô∏è Production-ready –ø—Ä–∞–∫—Ç–∏–∫–∏

* –Ø–≤–Ω—ã–µ docstrings, PEP484 type hints, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å retry/backoff
* –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å OpenAI ‚â•1.12 SDK (client.chat.completions.create)
* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–º–ø–ª–∏–Ω–≥–∞ –∏ –ª–∏–º–∏—Ç—ã –≤ YAML, –∞ –Ω–µ –≤ –∫–æ–¥–µ
* –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤, –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ–º—ã–π pipeline
* –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —á–µ–∫–ª–∏—Å—Ç–∞ –¥–ª—è —á–µ—Å—Ç–Ω–æ–≥–æ, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ–≥–æ grade

---

## ‚ùì FAQ

* **–í: –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤?**

  * –ü—Ä–æ—Å—Ç–æ –ø–æ–ª–æ–∂–∏ –Ω–æ–≤—ã–µ `.md`-—Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É `candidates/` –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ pipeline.

* **–í: –ö–∞–∫ –ø–æ–º–µ–Ω—è—Ç—å –º–æ–¥–µ–ª—å/–ø–∞—Ä–∞–º–µ—Ç—Ä—ã?**

  * –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π `config.yaml`, –Ω–µ –∑–∞–±—É–¥—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç.

* **–í: –ì–¥–µ —Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—É–¥–µ–π—Å–∫—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É?**

  * –û—Ç–∫—Ä–æ–π `results.json`, —Å–º–æ—Ç—Ä–∏ –ø–æ–ª–µ `"raw_response"`.

---

## üìù –ê–≤—Ç–æ—Ä / –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: [mityanos](https://github.com/mityanos)
–ü–æ–∂–µ–ª–∞–Ω–∏—è, –±–∞–≥—Ä–µ–ø–æ—Ä—Ç—ã ‚Äî —á–µ—Ä–µ–∑ GitHub Issues.

---




# 002 - llm_resume_grader/config.yaml
# 002 - llm_resume_grader/config.yaml
llm:
  model: "gpt-4.1-mini-2025-04-14"

  params:
    temperature: 0.2
    top_p: 1.0
    frequency_penalty: 0
    presence_penalty: 0
    max_tokens: 1000

  retry_max: 6

grading:
  scale: {A: 4, B: 3, C: 2, D: 1}


paths:
  candidates_glob: "data/input/candidates/*.md"
  system_prompt:    "data/input/system_prompt.md"
  out_json:         "data/output/results.json"
  out_md_summary:   "data/output/results_summary.md"
  out_md_full:      "data/output/results_full.md"
  candidate_md_dir: "data/output/candidates_md"

# 003 - llm_resume_grader/data/input/candidates/–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞.md
# –ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞  
Backend Lead / Middle Backend Engineer  
–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è | +7 912 123-45-67 | anna.smirnova@example.com  
LinkedIn: linkedin.com/in/anna-smirnova | GitHub: github.com/anna-smirnova  

---

## –¶–ï–õ–¨  
–°—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥—ã Aviasales –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ Middle Backend Engineer, –ø—Ä–∏–º–µ–Ω—è—è –æ–ø—ã—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –Ω–∞ Python, FastAPI –∏ PostgreSQL, –∞ —Ç–∞–∫–∂–µ —Ä–∞–∑–≤–∏–≤–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ CI/CD –∏ –æ–±–ª–∞—á–Ω—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞ AWS/Terraform.

---

## –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–í–´–ö–ò  
- **–Ø–∑—ã–∫–∏:** Python (8 –ª–µ—Ç), SQL (5 –ª–µ—Ç), Bash  
- **–§—Ä–µ–π–º–≤–æ—Ä–∫–∏:** FastAPI, Flask, Django REST Framework  
- **–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:** PostgreSQL, Redis, Elasticsearch  
- **–û–±–ª–∞–∫–æ:** AWS (EC2, S3, RDS, Lambda), Terraform (IaC)  
- **–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è:** Docker, Kubernetes (EKS)  
- **CI/CD:** GitLab CI, Jenkins, Ansible, Helm  
- **–°–∏—Å—Ç–µ–º–Ω—ã–π –¥–∏–∑–∞–π–Ω:** –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã, event-driven (Kafka)  
- **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:** pytest, pytest-cov, integration tests, Tox  
- **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:** Prometheus, Grafana, ELK Stack  
- **–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:** Clean Code, SOLID, Code Review, Agile/Scrum  

---

## –û–ü–´–¢ –†–ê–ë–û–¢–´  

### Backend Lead, TechEdge Solutions (–ú–æ—Å–∫–≤–∞)  
*–ò—é–Ω—å 2020 ‚Äì –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è*  
- –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥–æ–π –∏–∑ 5 backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, Code Review, –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ.  
- –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–∞ Python/FastAPI, PostgreSQL, Redis.  
- Terraform-–º–æ–¥—É–ª–∏ –¥–ª—è AWS (EC2 Auto Scaling, RDS Multi-AZ, S3), –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ 500 –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤.  
- CI/CD: GitLab CI, Docker, Kubernetes (EKS), Helm Charts, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ rollout/rollback.  
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: Prometheus, Grafana, ELK –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞.  
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Kafka, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ consumer-–≥—Ä—É–ø–ø, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è throughput.  
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ –∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.  
- –†–µ–∑—É–ª—å—Ç–∞—Ç: –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API ‚Üì45%, –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å 99.99%.  

### Senior Python Developer, InnoTravel Co. (–ú–æ—Å–∫–≤–∞)  
*–ú–∞—Ä—Ç 2017 ‚Äì –ú–∞–π 2020*  
- RESTful API –Ω–∞ Flask –∏ Django REST Framework –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–π—Å–æ–≤.  
- ETL-–ø–∞–π–ø–ª–∞–π–Ω –Ω–∞ Airflow, –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.  
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Amadeus, Sabre (GDS).  
- Docker, AWS EC2, Elastic Beanstalk ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–µ–ø–ª–æ—è.  
- Unit- –∏ integration-—Ç–µ—Å—Ç—ã (pytest) —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º 85%.  
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è latency ‚Üì30% —á–µ—Ä–µ–∑ Redis-–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ ORM-—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥.  

### Python Developer, SoftSolutions (–ú–æ—Å–∫–≤–∞)  
*–ê–≤–≥—É—Å—Ç 2014 ‚Äì –§–µ–≤—Ä–∞–ª—å 2017*  
- Backend –Ω–∞ Python 2.7, Django, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ PostgreSQL 9.3.  
- Linux-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ (Ubuntu), –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (Nagios), –¥–µ–ø–ª–æ–π.  
- Code Review, —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ legacy-–∫–æ–¥–∞, —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–≥–æ–≤.  

---

## –û–ë–†–ê–ó–û–í–ê–ù–ò–ï  
**–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –ì–ê (–ú–ò–†–≠–ê)**  
–ë–∞–∫–∞–ª–∞–≤—Ä, –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞  
–°–µ–Ω—Ç—è–±—Ä—å 2010 ‚Äì –ò—é–Ω—å 2014  

- –¢–µ–º–∞ –¥–∏–ø–ª–æ–º–∞: ¬´–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤¬ª  

---

## –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï  
- AWS Certified Solutions Architect ‚Äì Associate (2022)  
- Certified Kubernetes Application Developer (CKAD) (2021)  
- HashiCorp Certified: Terraform Associate (2020)  
- –ö—É—Ä—Å ¬´Designing Data-Intensive Applications¬ª (Coursera, 2021)  
- –£—á–∞—Å—Ç–∏–µ –≤ –º–∏—Ç–∞–ø–∞—Ö Python Moscow, DevOpsDays Moscow  

---

## –Ø–ó–´–ö–ò  
- –†—É—Å—Å–∫–∏–π ‚Äî —Ä–æ–¥–Ω–æ–π  
- –ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Äî Upper-Intermediate (B2)  
---
**–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞**  
–¢–µ–ª–µ—Ñ–æ–Ω: +7 912 123-45-67  
E-mail: anna.smirnova@example.com  
LinkedIn: linkedin.com/in/anna-smirnova  

15 –º–∞—è 2025  

Hiring Manager  
Aviasales  
–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è  

–£–≤–∞–∂–∞–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞ Aviasales,

–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞, –∏ —è –æ–±—Ä–∞—â–∞—é—Å—å –∫ –≤–∞–º —Å –∏—Å–∫—Ä–µ–Ω–Ω–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–º –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ Middle Backend Engineer. –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 –ª–µ—Ç —è —Ä–∞–∑–≤–∏–≤–∞–ª–∞—Å—å –∫–∞–∫ Backend Lead, —Ä–∞–±–æ—Ç–∞—è –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–º–∏ API –∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª—è—é –∫–∞—á–µ—Å—Ç–≤—É –∫–æ–¥–∞, –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≤ –æ–±–ª–∞–∫–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ CI/CD-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –Ø –≥–ª—É–±–æ–∫–æ —Ä–∞–∑–¥–µ–ª—è—é —Ü–µ–Ω–Ω–æ—Å—Ç–∏ Aviasales: —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –∏–Ω–Ω–æ–≤–∞—Ü–∏—è–º, –≤—ã—Å–æ–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.

**–ü–æ—á–µ–º—É —è –º–æ–≥—É –ø—Ä–∏–Ω–µ—Å—Ç–∏ –ø–æ–ª—å–∑—É Aviasales:**  
1. **–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å high-load**: –≤ –∫–∞—á–µ—Å—Ç–≤–µ Backend Lead —è –æ—Ç–≤–µ—á–∞–ª–∞ –∑–∞ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤ —Å –ø–∏–∫–æ–≤—ã–º–∏ –Ω–∞–≥—Ä—É–∑–∫–∞–º–∏ –¥–æ 50 000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É.  
2. **–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –≤ AWS & Terraform**: —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∞ –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–ª–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ AWS —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Terraform, –æ–±–µ—Å–ø–µ—á–∏–≤ –±–µ–∑–æ—Ç–∫–∞–∑–Ω—É—é —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ 500+ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤.  
3. **–ú–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ –∏ –∫–æ–º–∞–Ω–¥–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞**: –Ω–∞ —Ç–µ–∫—É—â–µ–º –º–µ—Å—Ç–µ —è –æ–±—É—á–∞—é –∏ –Ω–∞—Å—Ç–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –ø—è—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –ø—Ä–æ–≤–æ–∂—É code review –∏ –≤–Ω–µ–¥—Ä—è—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ Clean Code –∏ SOLID.  

–•–æ—á—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ Aviasales, —á—Ç–æ–±—ã —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å backend-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É, –¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ —É—á–∏—Ç—å—Å—è —É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –≤–µ–¥—É—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ travel-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.  

–ì–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è.  

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,  
–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞  
---
### –ö–õ–Æ–ß–ï–í–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø
- **0-downtime –º–∏–≥—Ä–∞—Ü–∏—è**: —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–ª–∞ –∏ —Ä—É–∫–æ–≤–æ–¥–∏–ª–∞ –ø–µ—Ä–µ–Ω–æ—Å–æ–º –º–æ–Ω–æ–ª–∏—Ç–∞ –Ω–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–æ—Å—Ç–æ–µ–º, —Ä–æ—Å—Ç TPS +40%.  
- **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏**: –∏–Ω–¥–µ–∫—Å—ã –∏ query profiling ‚Üí –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ ‚Üì60% –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–∑–ª–∞—Ö.  
- **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã**: Terraform-–º–æ–¥—É–ª–∏ –¥–ª—è AWS ‚Üí —Ä—É—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ‚Üì80%.  
- **–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ API**: FastAPI-—Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π, –≤—ã–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 10 000 RPS —Å –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é.  
- **–ú–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ**: –ø—Ä–æ–≤–µ–ª–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ ‚Üí –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ ‚Üë25%.

---

### –ü–†–û–ï–ö–¢–´
1. **–°–µ—Ä–≤–∏—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤ high-load**  
   - FastAPI, PostgreSQL, Redis, Kubernetes, Helm.  
   - –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ 50 000 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω, –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ –ø–∏–∫.  
2. **–°–µ—Ä–≤–∏—Å —É—á–µ—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π**  
   - FastAPI, Celery, RabbitMQ, Docker.  
   - –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Stripe, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏.  
3. **–ü–µ—Ä–µ–µ–∑–¥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö**  
   - –ú–∏–≥—Ä–∞—Ü–∏—è Monolith PostgreSQL ‚Üí –∫–ª–∞—Å—Ç–µ—Ä–Ω—ã–π Multi-AZ, –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è downtime.  

---

### –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´
- **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:** pytest, pytest-cov, integration tests  
- **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:** Prometheus, Grafana, ELK Stack  
- **CI/CD:** GitLab CI, Jenkins, Ansible, Helm  
- **–û–±–ª–∞—á–Ω—ã–µ:** AWS (EC2, RDS, S3, Lambda), Terraform  
- **–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è:** Docker, Kubernetes (EKS)  
- **–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:** Jira, Confluence, Slack, VSCode, PyCharm

---

### –õ–ò–ß–ù–´–ï –ö–ê–ß–ï–°–¢–í–ê
- –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º  
- –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á  
- –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∫ –Ω–æ–≤—ã–º –∑–Ω–∞–Ω–∏—è–º  
- –°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º  


# 004 - llm_resume_grader/data/input/candidates/–í–∏–∫—Ç–æ—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞.md
# –í–∏–∫—Ç–æ—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞  
Data Analyst ‚Üí Junior Backend Developer  
–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è | +7 901 789-12-34 | viktoria.petrov–∞@example.com  
LinkedIn: linkedin.com/in/viktoriapetrova | GitHub: github.com/viktoriapetrova  

---

## –¶–ï–õ–¨  
–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é Junior/Middle Backend Developer –≤ Aviasales, –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞–≤—ã–∫–∏ Python –∏ SQL, –∞ —Ç–∞–∫–∂–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –≤–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞—Ö Flask/FastAPI –∏ –æ–±–ª–∞—á–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö.

---

## –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–í–´–ö–ò  
- **–Ø–∑—ã–∫–∏:** Python (4 –≥–æ–¥–∞), SQL (4 –≥–æ–¥–∞), Bash (—Å—Ä–µ–¥–Ω–∏–π)  
- **–§—Ä–µ–π–º–≤–æ—Ä–∫–∏:** Flask (1 –≥–æ–¥), FastAPI (6 –º–µ—Å—è—Ü–µ–≤)  
- **–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:** PostgreSQL (2 –≥–æ–¥–∞ –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å), MySQL (1 –≥–æ–¥), SQLite  
- **–û–±–ª–∞–∫–æ:** AWS (EC2, S3) ‚Äî –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å  
- **–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è:** Docker ‚Äî –Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å  
- **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:** Pandas, NumPy, Matplotlib, Seaborn  
- **BI:** Tableau, Power BI  
- **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:** pytest (–±–∞–∑–æ–≤—ã–π)  
- **–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏:** Scrum, Kanban, Jira  
- **–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:** Git, GitHub, VSCode, Jupyter Notebook  

---

## –û–ü–´–¢ –†–ê–ë–û–¢–´  

### Data Analyst, BizData Consult (–ú–æ—Å–∫–≤–∞)  
*–ò—é–Ω—å 2021 ‚Äì –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è*  
- –°–±–æ—Ä, –æ—á–∏—Å—Ç–∫–∞, –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (Excel, CSV, PostgreSQL).  
- ETL-–ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ Python (Pandas, SQLAlchemy): –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö.  
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ Tableau –∏ Power BI: –¥–∞—à–±–æ—Ä–¥—ã –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞.  
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ PostgreSQL: –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ‚Üì50%.  
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.  

### Python Developer (Intern), ITStart Lab (–ú–æ—Å–∫–≤–∞)  
*–°–µ–Ω—Ç—è–±—Ä—å 2020 ‚Äì –ú–∞–π 2021*  
- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Flask: CRUD –∏ REST API.  
- Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.  
- Unit-—Ç–µ—Å—Ç—ã –Ω–∞ pytest: –ø–æ–∫—Ä—ã—Ç–∏–µ 60%.  
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –≤ Swagger/OpenAPI.  

---

## –û–ë–†–ê–ó–û–í–ê–ù–ò–ï  
**–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –§–∏–Ω–∞–Ω—Å–æ–≤–æ-–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç (–ú–§–¢–£)**  
–ë–∞–∫–∞–ª–∞–≤—Ä, –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞  
–°–µ–Ω—Ç—è–±—Ä—å 2017 ‚Äì –ò—é–Ω—å 2021  

- –î–∏–ø–ª–æ–º: ¬´–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ PostgreSQL –∏ Python¬ª  

---

## –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï  
- ¬´Introduction to Flask¬ª (Udemy, 2021)  
- ¬´Python for Data Science¬ª (Coursera, 2020)  
- ¬´KursDev Backend Bootcamp¬ª (–æ–Ω–ª–∞–π–Ω, 2022)  

---

## –Ø–ó–´–ö–ò  
- –†—É—Å—Å–∫–∏–π ‚Äî —Ä–æ–¥–Ω–æ–π  
- –ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Äî Intermediate (B1)  
---
**–í–∏–∫—Ç–æ—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞**  
–¢–µ–ª–µ—Ñ–æ–Ω: +7 901 789-12-34  
E-mail: viktoria.petrov–∞@example.com  
LinkedIn: linkedin.com/in/viktoriapetrova  

25 –º–∞—è 2025  

HR Department  
Aviasales  
–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è  

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º—ã–µ —Ä–µ–∫—Ä—É—Ç–µ—Ä—ã Aviasales!

–ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∏–∫—Ç–æ—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞. –í –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ—Ç—ã—Ä–µ –≥–æ–¥–∞ —è —Ä–∞–±–æ—Ç–∞–ª–∞ Data Analyst –≤ –Ω–µ–±–æ–ª—å—à–æ–π –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏, –≥–¥–µ –∑–∞–Ω–∏–º–∞–ª–∞—Å—å —Å–±–æ—Ä–æ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏. –° –Ω–µ–¥–∞–≤–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —è —É–≤–ª–µ–∫–ª–∞—Å—å backend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –∏ –ø—Ä–æ—à–ª–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–æ–≤ –ø–æ Python (¬´Python for Data Science¬ª, ¬´Introduction to Flask¬ª), –∞ —Ç–∞–∫–∂–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–ª–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–±–æ–ª—å—à–∏—Ö API-—Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.

–Ø —Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ –≤ –æ–±–ª–∞—Å—Ç–∏ backend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤–µ—Ä—é, —á—Ç–æ Aviasales –∫–∞–∫ –ª–∏–¥–µ—Ä –≤ travel-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –¥–∞—Å—Ç –º–Ω–µ –æ—Ç–ª–∏—á–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—á–∏—Ç—å—Å—è —É —Å–∏–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã. –Ø –≥–æ—Ç–æ–≤–∞ –±—ã—Å—Ç—Ä–æ –ø–æ–≥—Ä—É–∂–∞—Ç—å—Å—è –≤ –∑–∞–¥–∞—á–∏, —É—á–∏—Ç—å—Å—è —É –æ–ø—ã—Ç–Ω—ã—Ö –∫–æ–ª–ª–µ–≥ –∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ.

**–ß—Ç–æ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å Aviasales:**  
- **Python & SQL:** 4 –≥–æ–¥–∞ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å Pandas, Jupyter, –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ PostgreSQL (–±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å).  
- **Flask & FastAPI (–Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å):** —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∞ prototype API –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (1 000‚Äì2 000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å).  
- **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:** –æ–ø—ã—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–æ–≤ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –Ω–∞ Tableau –∏ Power BI.  

–ù–∞–¥ —á–µ–º –±—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å:  
- –ê–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞—é Kubernetes –∏ Docker, –ø–ª–∞–Ω–∏—Ä—É—é –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å ¬´Docker –∏ Kubernetes –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤¬ª.  
- –ù–∞—á–∏–Ω–∞—é —É—á–∏—Ç—å AWS (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ EC2 –∏ S3).  

–ë—É–¥—É –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω–∞ –∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–π—Ç–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,  
–í–∏–∫—Ç–æ—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞  
---
### –ö–õ–Æ–ß–ï–í–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø
- **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤:** ETL-–ø–∞–π–ø–ª–∞–π–Ω –Ω–∞ Python (Pandas, SQLAlchemy) ‚Üí —Ä—É—á–Ω–æ–π —Ç—Ä—É–¥ ‚Üì60%.  
- **–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π Flask API:** CRUD-—Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–¥–∞—á (PostgreSQL), Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ.  
- **Data Visualization Dashboard:** –¥–∞—à–±–æ—Ä–¥ –≤ Tableau –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π, –æ–¥–æ–±—Ä–µ–Ω–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º.  
- **SQL-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:** –¥–æ–ª–≥–∏–µ –∑–∞–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–ø–∏—Å–∞–ª, –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ‚Üì50%.  

---

### –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´
- **Python, SQL, Bash**  
- **Flask, FastAPI (–Ω–∞—á–∞–ª—å–Ω—ã–π)**  
- **PostgreSQL, MySQL, SQLite**  
- **AWS (EC2, S3) ‚Äî –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å**  
- **Docker ‚Äî –±–∞–∑–æ–≤—ã–π**  
- **Tableau, Power BI**  
- **pytest (–±–∞–∑–æ–≤—ã–π)**  
- **Git, GitHub, VSCode, Jupyter Notebook**  
- **Jira, Scrum, Kanban**  

---

### –õ–ò–ß–ù–´–ï –ö–ê–ß–ï–°–¢–í–ê
- –ë—ã—Å—Ç—Ä–æ –æ–±—É—á–∞—é—Å—å, –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤ backend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ  
- –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ  
- –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏ –¥–∞–≤–∞—Ç—å —Ñ–∏–¥–±—ç–∫  
- –£–ø–æ—Ä—Å—Ç–≤–æ –∏ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –≤ —Ä–µ—à–µ–Ω–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á  


# 005 - llm_resume_grader/data/input/candidates/–ú–∏—Ö–∞–∏–ª –ò–≤–∞–Ω–æ–≤.md
# –ú–∏—Ö–∞–∏–ª –ò–≤–∞–Ω–æ–≤  
Backend Developer  
–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è | +7 916 654-32-10 | m.ivanov.talents@example.com  
LinkedIn: linkedin.com/in/mikhail-ivanov | GitHub: github.com/mikhail-ivanov  

---

## –¶–ï–õ–¨  
–ó–∞–Ω—è—Ç—å –ø–æ–∑–∏—Ü–∏—é Middle Backend Engineer –≤ Aviasales, –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ Python/FastAPI, PostgreSQL –∏ Docker, –∞ —Ç–∞–∫–∂–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –≤ AWS –∏ DevOps.

---

## –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–í–´–ö–ò  
- **–Ø–∑—ã–∫–∏:** Python (5 –ª–µ—Ç), SQL (4 –≥–æ–¥–∞), Bash  
- **–§—Ä–µ–π–º–≤–æ—Ä–∫–∏:** FastAPI (2 –≥–æ–¥–∞), Flask (2 –≥–æ–¥–∞), Django (1 –≥–æ–¥)  
- **–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:** PostgreSQL (3 –≥–æ–¥–∞), MySQL (1 –≥–æ–¥), Redis (1 –≥–æ–¥)  
- **–û–±–ª–∞–∫–æ:** AWS (EC2, RDS), –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è Terraform  
- **–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è:** Docker (2 –≥–æ–¥–∞), –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è Kubernetes  
- **CI/CD:** GitLab CI, GitHub Actions  
- **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:** pytest, unittest  
- **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:** Grafana (–±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞), CloudWatch  
- **–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏:** Agile/Scrum, Jira, Confluence  

---

## –û–ü–´–¢ –†–ê–ë–û–¢–´  

### Backend Developer, FinanceWare (–ú–æ—Å–∫–≤–∞)  
*–ò—é–ª—å 2021 ‚Äì –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è*  
- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ Python/FastAPI, PostgreSQL, Redis.  
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è REST API (profiling, —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ).  
- Dockerfile –∏ docker-compose –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.  
- CI/CD —Å GitLab CI: –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–±–æ—Ä–∫–∞ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ.  
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AWS RDS PostgreSQL: —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–Ω–∏–º–∫–æ–≤.  
- Pytest: –Ω–∞–ø–∏—Å–∞–ª–∞ –±–æ–ª–µ–µ 200 —Ç–µ—Å—Ç–æ–≤, –ø–æ–∫—Ä—ã—Ç–∏–µ 75%.  
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫ —á–µ—Ä–µ–∑ Grafana + –æ–ø–æ–≤–µ—â–µ–Ω–∏—è Slack.  

**–ü—Ä–æ–µ–∫—Ç—ã:**  
1. **API –ø–ª–∞—Ç–µ–∂–µ–π**  
   - FastAPI, PostgreSQL, Redis, Docker, GitLab CI.  
   - –ù–∞–≥—Ä—É–∑–∫–∞ –¥–æ 5 000 RPS, latency <100 –º—Å.  
2. **–°–µ—Ä–≤–∏—Å –æ—Ç—á–µ—Ç–æ–≤**  
   - Flask, Celery, RabbitMQ, PostgreSQL.  
   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á–µ—Ç–æ–≤.  

### Python Developer, TechInno (–ú–æ—Å–∫–≤–∞)  
*–ê–ø—Ä–µ–ª—å 2019 ‚Äì –ò—é–Ω—å 2021*  
- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ CRM –Ω–∞ Flask/Django, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è 1C —á–µ—Ä–µ–∑ SOAP.  
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ MySQL: —Å–ª–æ–∂–Ω—ã–µ SQL-–∑–∞–ø—Ä–æ—Å—ã, –∏–Ω–¥–µ–∫—Å—ã.  
- CI: GitHub Actions, –¥–µ–ø–ª–æ–π –Ω–∞ Heroku.  
- Code Review, —É—á–∞—Å—Ç–∏–µ –≤ Scrum.  

**–ü—Ä–æ–µ–∫—Ç—ã:**  
1. **CRM –¥–ª—è –º–µ–¥—Ç–µ—Ö-–∫–æ–º–ø–∞–Ω–∏–∏**  
   - Django REST, PostgreSQL, SOAP-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è.  
2. **–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö**  
   - Flask, BeautifulSoup –¥–ª—è scraping.  

### Junior Python Developer, SoftDev Lab (–ú–æ—Å–∫–≤–∞)  
*–°–µ–Ω—Ç—è–±—Ä—å 2017 ‚Äì –ú–∞—Ä—Ç 2019*  
- Web-—Å–µ—Ä–≤–∏—Å—ã –Ω–∞ Flask, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ Ubuntu (Nginx, Gunicorn).  
- MySQL: —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤.  
- –°–∫—Ä–∏–ø—Ç—ã –Ω–∞ Bash –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤.  

---

## –û–ë–†–ê–ó–û–í–ê–ù–ò–ï  
**–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ò–Ω—Å—Ç–∏—Ç—É—Ç –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–π (–ú–ò–¢)**  
–ë–∞–∫–∞–ª–∞–≤—Ä, –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞  
–°–µ–Ω—Ç—è–±—Ä—å 2013 ‚Äì –ò—é–Ω—å 2017  

- –î–∏–ø–ª–æ–º: ¬´–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ RESTful API –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞¬ª  

---

## –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï  
- ¬´FastAPI. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞¬ª (Udemy, 2022)  
- ¬´–û—Å–Ω–æ–≤—ã AWS –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤¬ª (Coursera, 2021)  
- –£—á–∞—Å—Ç–∏–µ –≤ PyCon Russia (2022, 2023)  

---

## –Ø–ó–´–ö–ò  
- –†—É—Å—Å–∫–∏–π ‚Äî —Ä–æ–¥–Ω–æ–π  
- –ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Äî Intermediate (B1)  

# 005 - llm_resume_grader/data/input/candidates/–ú–∏—Ö–∞–∏–ª –ò–≤–∞–Ω–æ–≤.md
# –ú–∏—Ö–∞–∏–ª –ò–≤–∞–Ω–æ–≤  
Backend Developer  
–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è | +7 916 654-32-10 | m.ivanov.talents@example.com  
LinkedIn: linkedin.com/in/mikhail-ivanov | GitHub: github.com/mikhail-ivanov  

---

## –¶–ï–õ–¨  
–ó–∞–Ω—è—Ç—å –ø–æ–∑–∏—Ü–∏—é Middle Backend Engineer –≤ Aviasales, –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ Python/FastAPI, PostgreSQL –∏ Docker, –∞ —Ç–∞–∫–∂–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –≤ AWS –∏ DevOps.

---

## –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–í–´–ö–ò  
- **–Ø–∑—ã–∫–∏:** Python (5 –ª–µ—Ç), SQL (4 –≥–æ–¥–∞), Bash  
- **–§—Ä–µ–π–º–≤–æ—Ä–∫–∏:** FastAPI (2 –≥–æ–¥–∞), Flask (2 –≥–æ–¥–∞), Django (1 –≥–æ–¥)  
- **–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:** PostgreSQL (3 –≥–æ–¥–∞), MySQL (1 –≥–æ–¥), Redis (1 –≥–æ–¥)  
- **–û–±–ª–∞–∫–æ:** AWS (EC2, RDS), –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è Terraform  
- **–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è:** Docker (2 –≥–æ–¥–∞), –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è Kubernetes  
- **CI/CD:** GitLab CI, GitHub Actions  
- **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:** pytest, unittest  
- **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:** Grafana (–±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞), CloudWatch  
- **–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏:** Agile/Scrum, Jira, Confluence  

---

## –û–ü–´–¢ –†–ê–ë–û–¢–´  

### Backend Developer, FinanceWare (–ú–æ—Å–∫–≤–∞)  
*–ò—é–ª—å 2021 ‚Äì –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è*  
- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ Python/FastAPI, PostgreSQL, Redis.  
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è REST API (profiling, —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ).  
- Dockerfile –∏ docker-compose –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.  
- CI/CD —Å GitLab CI: –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–±–æ—Ä–∫–∞ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ.  
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AWS RDS PostgreSQL: —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–Ω–∏–º–∫–æ–≤.  
- Pytest: –Ω–∞–ø–∏—Å–∞–ª–∞ –±–æ–ª–µ–µ 200 —Ç–µ—Å—Ç–æ–≤, –ø–æ–∫—Ä—ã—Ç–∏–µ 75%.  
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫ —á–µ—Ä–µ–∑ Grafana + –æ–ø–æ–≤–µ—â–µ–Ω–∏—è Slack.  

**–ü—Ä–æ–µ–∫—Ç—ã:**  
1. **API –ø–ª–∞—Ç–µ–∂–µ–π**  
   - FastAPI, PostgreSQL, Redis, Docker, GitLab CI.  
   - –ù–∞–≥—Ä—É–∑–∫–∞ –¥–æ 5 000 RPS, latency <100 –º—Å.  
2. **–°–µ—Ä–≤–∏—Å –æ—Ç—á–µ—Ç–æ–≤**  
   - Flask, Celery, RabbitMQ, PostgreSQL.  
   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á–µ—Ç–æ–≤.  

### Python Developer, TechInno (–ú–æ—Å–∫–≤–∞)  
*–ê–ø—Ä–µ–ª—å 2019 ‚Äì –ò—é–Ω—å 2021*  
- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ CRM –Ω–∞ Flask/Django, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è 1C —á–µ—Ä–µ–∑ SOAP.  
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ MySQL: —Å–ª–æ–∂–Ω—ã–µ SQL-–∑–∞–ø—Ä–æ—Å—ã, –∏–Ω–¥–µ–∫—Å—ã.  
- CI: GitHub Actions, –¥–µ–ø–ª–æ–π –Ω–∞ Heroku.  
- Code Review, —É—á–∞—Å—Ç–∏–µ –≤ Scrum.  

**–ü—Ä–æ–µ–∫—Ç—ã:**  
1. **CRM –¥–ª—è –º–µ–¥—Ç–µ—Ö-–∫–æ–º–ø–∞–Ω–∏–∏**  
   - Django REST, PostgreSQL, SOAP-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è.  
2. **–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö**  
   - Flask, BeautifulSoup –¥–ª—è scraping.  

### Junior Python Developer, SoftDev Lab (–ú–æ—Å–∫–≤–∞)  
*–°–µ–Ω—Ç—è–±—Ä—å 2017 ‚Äì –ú–∞—Ä—Ç 2019*  
- Web-—Å–µ—Ä–≤–∏—Å—ã –Ω–∞ Flask, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ Ubuntu (Nginx, Gunicorn).  
- MySQL: —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤.  
- –°–∫—Ä–∏–ø—Ç—ã –Ω–∞ Bash –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤.  

---

## –û–ë–†–ê–ó–û–í–ê–ù–ò–ï  
**–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ò–Ω—Å—Ç–∏—Ç—É—Ç –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–π (–ú–ò–¢)**  
–ë–∞–∫–∞–ª–∞–≤—Ä, –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞  
–°–µ–Ω—Ç—è–±—Ä—å 2013 ‚Äì –ò—é–Ω—å 2017  

- –î–∏–ø–ª–æ–º: ¬´–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ RESTful API –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞¬ª  

---

## –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï  
- ¬´FastAPI. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞¬ª (Udemy, 2022)  
- ¬´–û—Å–Ω–æ–≤—ã AWS –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤¬ª (Coursera, 2021)  
- –£—á–∞—Å—Ç–∏–µ –≤ PyCon Russia (2022, 2023)  

---

## –Ø–ó–´–ö–ò  
- –†—É—Å—Å–∫–∏–π ‚Äî —Ä–æ–¥–Ω–æ–π  
- –ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Äî Intermediate (B1)  
---
**–ú–∏—Ö–∞–∏–ª –ò–≤–∞–Ω–æ–≤**  
–¢–µ–ª–µ—Ñ–æ–Ω: +7 916 654-32-10  
E-mail: m.ivanov.talents@example.com  
LinkedIn: linkedin.com/in/mikhail-ivanov  

20 –º–∞—è 2025  

HR Team  
Aviasales  
–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è  

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞ Aviasales!

–ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∏—Ö–∞–∏–ª –ò–≤–∞–Ω–æ–≤, —É –º–µ–Ω—è –ø—è—Ç–∏–ª–µ—Ç–Ω–∏–π –æ–ø—ã—Ç backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤. –° —Ç–µ—Ö –ø–æ—Ä –∫–∞–∫ —è –≤–ø–µ—Ä–≤—ã–µ —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å FastAPI –∏ PostgreSQL, —è –ø–æ–Ω—è–ª, —á—Ç–æ —Ö–æ—á—É —Å—Ç—Ä–æ–∏—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–µ API –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥ —è –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª –ø—Ä–æ–µ–∫—Ç –Ω–∞ FastAPI, Docker –∏ GitLab CI, –∞ —Ç–∞–∫–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –∑–∞–ø—É—Å–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥—Ä—É–≥–∏—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –æ–±–ª–∞–∫–µ AWS.  

**–ü–æ—á–µ–º—É Aviasales?**  
- –í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –ª–∏–¥–∏—Ä—É–µ—Ç –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ travel-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –ú–Ω–µ –±–ª–∏–∑–∫–∏ –≤–∞—à–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏: –∫–ª–∏–µ–Ω—Ç–æ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.  
- –Ø —Å—Ç—Ä–µ–º–ª—é—Å—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ —Ä–æ–ª–∏ Middle Backend Engineer, –∏ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Å–º–æ–≥—É –±—ã—Å—Ç—Ä–æ –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –≤–∞—à–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ DevOps.  

–ú–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:  
- **FastAPI & PostgreSQL**: 2 –≥–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ production-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –æ–ø—ã—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤, –∏–Ω–¥–µ–∫—Å—ã).  
- **Docker & CI/CD**: –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å–±–æ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ GitLab CI/CD.  
- **AWS (–±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å)**: —Å–æ–∑–¥–∞–Ω–∏–µ EC2-–∏–Ω—Å—Ç–∞–Ω—Å–æ–≤, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ RDS PostgreSQL.  

–ï—Å—Ç—å, –Ω–∞–¥ —á–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å:  
- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞ —Å Terraform –∏ Kubernetes, –Ω–æ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂—É –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã –ø–æ Kubernetes (CKA Foundation).  
- –ü–ª–∞–Ω–∏—Ä—É—é —É–≥–ª—É–±–∏—Ç—å –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π (Kafka) –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã.  

–ë—É–¥—É —Ä–∞–¥ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ—ë–º –æ–ø—ã—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é.  

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,  
–ú–∏—Ö–∞–∏–ª –ò–≤–∞–Ω–æ–≤  
---
### –ö–õ–Æ–ß–ï–í–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø
- **FastAPI-–ø—Ä–æ–µ–∫—Ç —Å –Ω–∞–≥—Ä—É–∑–∫–æ–π –¥–æ 5 000 RPS**: –ø–æ–≤—ã—Å–∏–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å–Ω–∏–∑–∏–≤ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ —Å 200 –º—Å –¥–æ 90 –º—Å.  
- **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SQL**: —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–æ–≤ ‚Üí –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ‚Üì40%.  
- **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏**: Docker + GitLab CI ‚Üí —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ dev/test/prod –æ–∫—Ä—É–∂–µ–Ω–∏–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.  
- **–û–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã**: –≤–æ—Ä–∫—à–æ–ø—ã –ø–æ FastAPI –∏ pytest ‚Üí –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏ ‚Üë20%.  

---

### –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´
- **Docker, Kubernetes (–Ω–∞—á–∞–ª—å–Ω—ã–π)**  
- **GitLab CI, GitHub Actions**  
- **pytest, unittest**  
- **Grafana, CloudWatch**  
- **AWS (EC2, RDS)**  
- **Jira, Confluence, Slack**  

---

### –õ–ò–ß–ù–´–ï –ö–ê–ß–ï–°–¢–í–ê
- –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –±—ã—Å—Ç—Ä–∞—è –æ–±—É—á–∞–µ–º–æ—Å—Ç—å  
- –ö–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, —É–º–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ  
- –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –∂–µ–ª–∞–Ω–∏–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è  
- –£–ø–æ—Ä—Å—Ç–≤–æ –≤ —Ä–µ—à–µ–Ω–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á  


# 006 - llm_resume_grader/data/input/system_prompt.md
# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –Ω–∞–π–º—É

## –†–æ–ª—å: AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –Ω–∞–π–º—É Aviasales

–¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∑–∞–¥–∞—á–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ ‚Äî —á–µ—Å—Ç–Ω–æ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –æ—Ç–∫–ª–∏–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –¥–≤—É–º —É—Ä–æ–≤–Ω—è–º (–∫–æ–º–ø–∞–Ω–∏—è –∏ –≤–∞–∫–∞–Ω—Å–∏—è), –∏—Å–ø–æ–ª—å–∑—É—è —è–≤–Ω—ã–π —á–µ–∫–ª–∏—Å—Ç –∏–∑ 4 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è. –ü–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∏—Ç–æ–≥–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ —Å–≤–æ–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è CoT –ø–æ –ø—É–Ω–∫—Ç–∞–º —á–µ–∫–ª–∏—Å—Ç–∞ (–Ω–æ –Ω–µ –ø–æ –ø–æ–¥—Å—á—ë—Ç—É scores).

---

### –û–±—â–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (Company-fit)

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º Aviasales:
- –û–ø—ã—Ç backend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ high-load —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ Python (>=3 –ª–µ—Ç)
- –ó–Ω–∞–Ω–∏–µ AWS (EC2, S3) –∏ Terraform (>=2 –≥–æ–¥–∞)
- –£–º–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ Agile-–∫–æ–º–∞–Ω–¥–µ –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å code review
- –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –Ω–∞ —É—Ä–æ–≤–Ω–µ –Ω–µ –Ω–∏–∂–µ B1

### –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (Vacancy-fit)

–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ ¬´Middle Backend Engineer¬ª:
- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å FastAPI –∏ PostgreSQL (>=2 –≥–æ–¥–∞)
- –û–ø—ã—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏ (Docker, Kubernetes)
- –ù–∞–ø–∏—Å–∞–Ω–∏–µ —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤ (pytest, coverage)
- –ó–Ω–∞–Ω–∏–µ CI/CD (GitLab CI –∏–ª–∏ Jenkins)

---

## –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

–û—Ç–∫–ª–∏–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É, —Å–æ–¥–µ—Ä–∂–∞—Ç:
- –†–µ–∑—é–º–µ
- –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ
- –î–æ–ø. –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ/–º–∞—Ç–µ—Ä–∏–∞–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)

---

## –ß—Ç–æ —Ç—ã –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞:

1. **Company-fit (CoT + —á–µ–∫–ª–∏—Å—Ç):**
   - –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è Chain-of-Thought –ø–æ –æ–±—â–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ö–∞–Ω–¥–∏–¥–∞—Ç –∏–º–µ–µ—Ç 8 –ª–µ—Ç –æ–ø—ã—Ç–∞ –Ω–∞ Python, –Ω–æ –Ω–µ —É–ø–æ–º—è–Ω—É–ª Terraform‚Ä¶¬ª).
   - –ó–∞—Ç–µ–º –ø—Ä–æ–π–¥–∏ —á–µ–∫–ª–∏—Å—Ç:
     1. –°–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –∫–ª—é—á–µ–≤–æ–π –æ–ø—ã—Ç –∏ —Å—Ç–µ–∫?  
        *–†–µ–∑—É–ª—å—Ç–∞—Ç: ¬´–¥–∞/–æ—Ç—á–∞—Å—Ç–∏/–Ω–µ—Ç¬ª + 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏.*
     2. –Ø—Å–Ω–æ –ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞—Ç—å –≤ Aviasales?  
        *–†–µ–∑—É–ª—å—Ç–∞—Ç: ¬´–¥–∞/–æ—Ç—á–∞—Å—Ç–∏/–Ω–µ—Ç¬ª + 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏.*
     3. –ù–∞—Å–∫–æ–ª—å–∫–æ —á—ë—Ç–∫–æ –∏ —è—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª—ã?  
        *–†–µ–∑—É–ª—å—Ç–∞—Ç: ¬´–¥–∞/–æ—Ç—á–∞—Å—Ç–∏/–Ω–µ—Ç¬ª + 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏.*
     4. –ï—Å—Ç—å –ª–∏ —Ä–∏—Å–∫–∏ –∏–ª–∏ –≤—ã–¥–∞—é—â–∏–µ—Å—è –ø–ª—é—Å—ã –¥–ª—è –∫—É–ª—å—Ç—É—Ä—ã –∫–æ–º–ø–∞–Ω–∏–∏?  
        *–†–µ–∑—É–ª—å—Ç–∞—Ç: ¬´–¥–∞/–æ—Ç—á–∞—Å—Ç–∏/–Ω–µ—Ç¬ª + 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏.*
   - –ü–æ—Å—á–∏—Ç–∞–π `common_score` (—á–∏—Å–ª–æ 0‚Äì50 –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤).  
     *–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´common_score: 35¬ª).*

2. **Vacancy-fit (CoT + —á–µ–∫–ª–∏—Å—Ç):**
   - –ù–∞–ø–∏—à–∏ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è Chain-of-Thought –ø–æ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–£ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –µ—Å—Ç—å –æ–ø—ã—Ç —Å FastAPI, –Ω–æ –º–∞–ª–æ –æ–ø—ã—Ç–∞ —Å Kubernetes‚Ä¶¬ª).
   - –ó–∞—Ç–µ–º –ø—Ä–æ–π–¥–∏ —á–µ–∫–ª–∏—Å—Ç:
     1. –°–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –æ–ø—ã—Ç/—Å—Ç–µ–∫ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏?  
        *–†–µ–∑—É–ª—å—Ç–∞—Ç: ¬´–¥–∞/–æ—Ç—á–∞—Å—Ç–∏/–Ω–µ—Ç¬ª + 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏.*
     2. –ß—ë—Ç–∫–æ –ª–∏ –æ–ø–∏—Å–∞–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥ —ç—Ç—É —Ä–æ–ª—å?  
        *–†–µ–∑—É–ª—å—Ç–∞—Ç: ¬´–¥–∞/–æ—Ç—á–∞—Å—Ç–∏/–Ω–µ—Ç¬ª + 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏.*
     3. –ù–∞—Å–∫–æ–ª—å–∫–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–æ–¥–∞–Ω–æ —Ä–µ–∑—é–º–µ/–ø–∏—Å—å–º–æ –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏?  
        *–†–µ–∑—É–ª—å—Ç–∞—Ç: ¬´–¥–∞/–æ—Ç—á–∞—Å—Ç–∏/–Ω–µ—Ç¬ª + 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏.*
     4. –ï—Å—Ç—å –ª–∏ —Ä–∏—Å–∫–∏ –∏–ª–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏?  
        *–†–µ–∑—É–ª—å—Ç–∞—Ç: ¬´–¥–∞/–æ—Ç—á–∞—Å—Ç–∏/–Ω–µ—Ç¬ª + 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏.*
   - –ü–æ—Å—á–∏—Ç–∞–π `local_score` (—á–∏—Å–ª–æ 0‚Äì50 –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤).  
     *–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´local_score: 40¬ª).*

3. **–°—É–º–º–∞—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:**
   - `total_score = common_score + local_score` (—á–∏—Å–ª–æ 0‚Äì100 –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤).
   - –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –¥–ª—è `total_score` (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´total_score: 75¬ª).

4. **–ì—Ä–µ–π–¥–∏–Ω–≥:**
   - A (90‚Äì100): —Ç–æ—á–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –æ–±–∞ —É—Ä–æ–≤–Ω—è.  
   - B (75‚Äì89): –≤ —Ü–µ–ª–æ–º –ø–æ–¥—Ö–æ–¥–∏—Ç, –µ—Å—Ç—å 1‚Äì2 –Ω–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∏–Ω—É—Å–∞.  
   - C (50‚Äì74): —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, —è–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã.  
   - D (<50): –Ω–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏–ª–∏ –Ω–µ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.  
   - –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏:
     ```
     Grade: <A|B|C|D> ‚Äì <1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è>
     ```

5. **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–∫—Ä—É—Ç—ë—Ä–∞ (pros/cons):**
   - –ù–∞–ø–∏—à–∏ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è Chain-of-Thought, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ pros –∏ cons.  
   - `pros` (2‚Äì3 –ø—É–Ω–∫—Ç–∞, –ø–æ —Å—É—â–µ—Å—Ç–≤—É, —Å —É—á—ë—Ç–æ–º —á–µ–∫–ª–∏—Å—Ç–æ–≤).  
   - `cons` (1‚Äì3 –ø—É–Ω–∫—Ç–∞, —á—ë—Ç–∫–æ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ).

6. **–ï—Å–ª–∏ —Ä–µ–∑—é–º–µ –Ω–µ—á–∏—Ç–∞–µ–º–æ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª ¬´Motivation¬ª:**
   - –°—Ä–∞–∑—É –≤—ã–¥–∞–≤–∞–π:
     ```json
     {
       "common_checklist": [],
       "common_score": 0,
       "common_score_comment": "",
       "local_checklist": [],
       "local_score": 0,
       "local_score_comment": "",
       "total_score": 0,
       "total_score_comment": "",
       "grade": "D",
       "grade_explanation": "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å: —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–ø–æ–ª–Ω—ã–π",
       "comment": {"pros": [], "cons": ["–ù–µ—á–∏—Ç–∞–µ–º–æ–µ –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω–æ–µ —Ä–µ–∑—é–º–µ"]}
     }
     ```
   - –ë–µ–∑ —á–µ–∫–ª–∏—Å—Ç–æ–≤ –∏ CoT.

---

## –§–æ—Ä–º–∞—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞

```json
{
  "common_checklist": [
    {
      "criterion": "<–ù–∞–∑–≤–∞–Ω–∏–µ>",
      "result": "<–¥–∞/–æ—Ç—á–∞—Å—Ç–∏/–Ω–µ—Ç>",
      "comment": "<1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏>"
    }
  ],
  "common_score": 35,
  "common_score_comment": "–ö–∞–Ω–¥–∏–¥–∞—Ç –∏–º–µ–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç, –Ω–æ –Ω–µ —É–ø–æ–º—è–Ω—É–ª Terraform.",
  "local_checklist": [
    {
      "criterion": "<–ù–∞–∑–≤–∞–Ω–∏–µ>",
      "result": "<–¥–∞/–æ—Ç—á–∞—Å—Ç–∏/–Ω–µ—Ç>",
      "comment": "<1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏>"
    }
  ],
  "local_score": 40,
  "local_score_comment": "–ï—Å—Ç—å –æ–ø—ã—Ç —Å FastAPI, –Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞ —Å PostgreSQL.",
  "total_score": 75,
  "total_score_comment": "–°—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.",
  "grade": "B",
  "grade_explanation": "–ö–∞–Ω–¥–∏–¥–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª –≤ PostgreSQL.",
  "comment": {
    "pros": ["–û–ø—ã—Ç —Å FastAPI –∏ AWS Lambda", "–ß—ë—Ç–∫–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥ —Ä–æ–ª—å"],
    "cons": ["–ú–∞–ª–æ –æ–ø—ã—Ç–∞ —Å PostgreSQL (<2 –≥–æ–¥–∞)"]
  }
}
````

---

## –ü—Ä–∏–º–µ—Ä—ã:

### Grade A

```markdown
# Chain-of-Thought (Company-fit)
–ö–∞–Ω–¥–∏–¥–∞—Ç –∏–º–µ–µ—Ç 8 –ª–µ—Ç –æ–ø—ã—Ç–∞ –Ω–∞ Python –∏ —É–ø–æ–º—è–Ω—É–ª Terraform‚Äî—ç—Ç–æ —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏.

* Relevance of skills and experience: –¥–∞  
  "8 –ª–µ—Ç –æ–ø—ã—Ç–∞ –Ω–∞ Python –∏ Terraform —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ Aviasales."  
* Motivation for the role: –¥–∞  
  "–ß—ë—Ç–∫–æ –≤—ã—Ä–∞–∂–∏–ª –∂–µ–ª–∞–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å API –∏ –Ω–∞—Å—Ç–∞–≤–ª—è—Ç—å."
* Communication and clarity: –¥–∞  
  "–†–µ–∑—é–º–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π."  
* Red flags or outstanding strengths: –Ω–µ—Ç  
  "–ù–µ—Ç —Ä–∏—Å–∫–æ–≤, —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞‚Äî–º–∏–≥—Ä–∞—Ü–∏–∏ –±–µ–∑ –ø—Ä–æ—Å—Ç–æ–µ–≤."

common_score: 50  
common_score_comment: "–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º —á–µ—Ç—ã—Ä—ë–º –ø—É–Ω–∫—Ç–∞–º."

# Chain-of-Thought (Vacancy-fit)
–ö–∞–Ω–¥–∏–¥–∞—Ç —Ä–∞–±–æ—Ç–∞–ª —Å FastAPI –∏ PostgreSQL –±–æ–ª–µ–µ 2 –ª–µ—Ç, –µ—Å—Ç—å Docker –∏ –æ–ø—ã—Ç DevOps.

* Relevance of skills and experience: –¥–∞  
  "FastAPI –∏ PostgreSQL –≤ –æ–ø—ã—Ç–µ‚Äî–∞–±—Å–æ–ª—é—Ç–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç."  
* Motivation for the role: –¥–∞  
  "–•–æ—á–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å API –≤ —É—Å–ª–æ–≤–∏—è—Ö –≤–∞–∫–∞–Ω—Å–∏–∏."  
* Communication and clarity: –¥–∞  
  "–†–µ–∑—é–º–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ –≤–∞–∫–∞–Ω—Å–∏—é: –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –Ω—É–∂–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏."  
* Red flags or outstanding strengths: –Ω–µ—Ç  
  "–ù–µ—Ç —Ä–∏—Å–∫–æ–≤, –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –ø–æ–∫—Ä—ã–≤–∞—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è."

local_score: 50  
local_score_comment: "–ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º."

total_score: 100  
total_score_comment: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª."

Grade: A ‚Äì –ö–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.  
pros: ["8 –ª–µ—Ç –æ–ø—ã—Ç–∞ –Ω–∞ Python –∏ Terraform", "–ß—ë—Ç–∫–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥ —Ä–æ–ª—å"]  
cons: []
```

---

### Grade B

```markdown
# Chain-of-Thought (Company-fit)
–ï—Å—Ç—å 4 –≥–æ–¥–∞ –æ–ø—ã—Ç–∞ –≤ HealthTech, –Ω–æ –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è Terraform.

* Relevance of skills and experience: –æ—Ç—á–∞—Å—Ç–∏  
  "–û–ø—ã—Ç 4 –≥–æ–¥–∞ –Ω–∞ Python, –Ω–æ –±–µ–∑ Terraform."  
* Motivation for the role: –¥–∞  
  "–ñ–µ–ª–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –º–∞—Å—à—Ç–∞–±–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ –ø–æ–Ω—è—Ç–Ω–æ–µ."  
* Communication and clarity: –¥–∞  
  "–†–µ–∑—é–º–µ —á–∏—Ç–∞–µ–º–æ."  
* Red flags or outstanding strengths: –æ—Ç—á–∞—Å—Ç–∏  
  "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ Terraform‚Äî–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∏—Å–∫."

common_score: 35  
common_score_comment: "–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª –≤ Terraform."

# Chain-of-Thought (Vacancy-fit)
–ï—Å—Ç—å –æ–ø—ã—Ç —Å FastAPI, –Ω–æ PostgreSQL –º–µ–Ω–µ–µ 2 –ª–µ—Ç.

* Relevance of skills and experience: –æ—Ç—á–∞—Å—Ç–∏  
  "FastAPI –µ—Å—Ç—å, –Ω–æ –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—ã—Ç —Å PostgreSQL."  
* Motivation for the role: –¥–∞  
  "–°—Ç—Ä–µ–º–∏—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å DevOps-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏."  
* Communication and clarity: –¥–∞  
  "–†–µ–∑—é–º–µ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –Ω—É–∂–Ω—ã—Ö —Ç–µ–º–∞—Ö."  
* Red flags or outstanding strengths: –æ—Ç—á–∞—Å—Ç–∏  
  "–ú–∞–ª–æ –æ–ø—ã—Ç–∞ —Å PostgreSQL, –Ω–æ –µ—Å—Ç—å AWS Lambda."

local_score: 40  
local_score_comment: "–ü–æ—á—Ç–∏ –≤—Å—ë —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –Ω–æ –ø—Ä–æ–±–µ–ª —Å PostgreSQL."

total_score: 75  
total_score_comment: "–°—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–ª –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –º–µ–∂–¥—É B –∏ C."

Grade: B ‚Äì –ö–∞–Ω–¥–∏–¥–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª –≤ PostgreSQL.  
pros: ["–û–ø—ã—Ç —Å FastAPI –∏ AWS Lambda", "–ß—ë—Ç–∫–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è"]  
cons: ["–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞ —Å PostgreSQL"]
```

---

### Grade C

```markdown
# Chain-of-Thought (Company-fit)
–ö–∞–Ω–¥–∏–¥–∞—Ç 3 –≥–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º, –µ—Å—Ç—å –±–∞–∑–æ–≤—ã–π Python, –Ω–æ –Ω–µ—Ç AWS/Terraform.

* Relevance of skills and experience: –æ—Ç—á–∞—Å—Ç–∏  
  "Python –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç –æ–ø—ã—Ç–∞ —Å AWS –∏ Terraform."  
* Motivation for the role: –æ—Ç—á–∞—Å—Ç–∏  
  "–•–æ—Ç–µ–ª–∞ –±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ backend, –Ω–æ –æ–ø—ã—Ç–∞ –º–∞–ª–æ."  
* Communication and clarity: –¥–∞  
  "–†–µ–∑—é–º–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ."  
* Red flags or outstanding strengths: –µ—Å—Ç—å  
  "–ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –æ–ø—ã—Ç–∞‚Äî–±–æ–ª—å—à–æ–π —Ä–∏—Å–∫."

common_score: 20  
common_score_comment: "–¢–æ–ª—å–∫–æ —á–∞—Å—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è –Ω–∞–≤—ã–∫–∏, —Å–µ—Ä—å—ë–∑–Ω—ã–π –ø—Ä–æ–±–µ–ª."

# Chain-of-Thought (Vacancy-fit)
–ï—Å—Ç—å –±–∞–∑–æ–≤—ã–π Flask, –Ω–æ –Ω–µ—Ç FastAPI –∏ PostgreSQL, –º–æ—Ç–∏–≤–∞—Ü–∏—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞.

* Relevance of skills and experience: –æ—Ç—á–∞—Å—Ç–∏  
  "Flask –µ—Å—Ç—å, FastAPI –∏ PostgreSQL –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."  
* Motivation for the role: –æ—Ç—á–∞—Å—Ç–∏  
  "–•–æ—á–µ—Ç –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞, –Ω–æ –Ω–µ—è—Å–Ω–æ, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏—è."  
* Communication and clarity: –¥–∞  
  "–†–µ–∑—é–º–µ –ø–æ–Ω—è—Ç–Ω–æ, –Ω–æ –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å."  
* Red flags or outstanding strengths: –µ—Å—Ç—å  
  "–ù–µ—Ç –∫–ª—é—á–µ–≤–æ–≥–æ –æ–ø—ã—Ç–∞ backend."

local_score: 25  
local_score_comment: "–ù–µ–ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–≤—ã–∫–∞–º, –º–æ—Ç–∏–≤–∞—Ü–∏—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è."

total_score: 45  
total_score_comment: "–°—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–ª —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ."

Grade: C ‚Äì –ï—Å—Ç—å Python –∏ SQL, –Ω–æ –Ω–µ—Ç –æ–ø—ã—Ç–∞ backend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –º–æ—Ç–∏–≤–∞—Ü–∏—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞.  
pros: ["–û—Å–Ω–æ–≤—ã Python –∏ Flask", "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ"]  
cons: ["–ù–µ—Ç –æ–ø—ã—Ç–∞ —Å FastAPI –∏ PostgreSQL", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç–∞"]
```

---

### Grade D

```markdown
# Chain-of-Thought (Company-fit)
–ö–∞–Ω–¥–∏–¥–∞—Ç 6 –ª–µ—Ç –∑–∞–Ω–∏–º–∞–ª—Å—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –¥–∏–∑–∞–π–Ω–æ–º, –Ω–µ—Ç IT-–æ–ø—ã—Ç–∞.

* Relevance of skills and experience: –Ω–µ—Ç  
  "–ù–µ—Ç –æ–ø—ã—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏."  
* Motivation for the role: –Ω–µ—Ç  
  "–ò–Ω—Ç–µ—Ä–µ—Å –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤ –∫ backend."  
* Communication and clarity: –¥–∞  
  "–†–µ–∑—é–º–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ, –Ω–æ –Ω–µ –ø–æ —Ç–µ–º–µ."  
* Red flags or outstanding strengths: –µ—Å—Ç—å  
  "–ü—Ä–æ—Ñ–∏–ª—å –≤–Ω–µ —Å—Ñ–µ—Ä—ã IT."

common_score: 0  
common_score_comment: "–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º."

# Chain-of-Thought (Vacancy-fit)
–ù–µ—Ç –Ω–∞–≤—ã–∫–æ–≤ and –º–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞.

* Relevance of skills and experience: –Ω–µ—Ç  
  "–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω, –Ω–µ backend."  
* Motivation for the role: –Ω–µ—Ç  
  "–ù–µ –Ω–∞—á–∏–Ω–∞–ª —É—á–∏—Ç—å—Å—è backend."  
* Communication and clarity: –¥–∞  
  "–†–µ–∑—é–º–µ —á–∏—Ç–∞–µ–º–æ, –Ω–æ –Ω–µ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏."  
* Red flags or outstanding strengths: –µ—Å—Ç—å  
  "–ü—Ä–æ—Ñ–∏–ª—å –≤–Ω–µ —Å—Ñ–µ—Ä—ã IT."

local_score: 0  
local_score_comment: "–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º."

total_score: 0  
total_score_comment: "–ü–æ–ª–Ω–æ–µ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ."

Grade: D ‚Äì –†–µ–∑—é–º–µ –≤–Ω–µ —Å—Ñ–µ—Ä—ã IT, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å.  
pros: []  
cons: ["–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º", "–ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤"]
```

---

### –ö–∞–Ω–¥–∏–¥–∞—Ç-–æ—à–∏–±–∫–∞

```markdown
# Chain-of-Thought (Error)
–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç JSON –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏ ¬´Grade: ‚Ä¶¬ª.

!ATTENTION!
* Relevance of skills and experience: –Ω–µ—Ç  
  "–ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ JSON, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."  
* Motivation for the role: –Ω–µ—Ç  
  "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–Ω—è—Ç–Ω—ã–π –≤—ã–≤–æ–¥."  
* Communication and clarity: –Ω–µ—Ç  
  "–ù–µ—Ç —á–∏—Ç–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."  
* Red flags or outstanding strengths: –Ω–µ—Ç  
  "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å."

common_score: 0  
common_score_comment: ""
local_score: 0  
local_score_comment: ""
total_score: 0  
total_score_comment: ""

Grade: D ‚Äì –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É JSON –∏–ª–∏ `Grade:`.  
pros: []  
cons: ["–ù–µ –≤–∞–ª–∏–¥–Ω—ã–π –≤—ã–≤–æ–¥ –º–æ–¥–µ–ª–∏"]
```


# 007 - llm_resume_grader/data/output/candidates_md/–ê–Ω–Ω–∞_–°–º–∏—Ä–Ω–æ–≤–∞.md
**Grade:** A (total_score: 100)  

## –ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞

**Company-fit = 50**  
‚Äú–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º —á–µ—Ç—ã—Ä—ë–º –ø—É–Ω–∫—Ç–∞–º –æ–±—â–µ–≥–æ —á–µ–∫–ª–∏—Å—Ç–∞.‚Äù

**Vacancy-fit = 50**  
‚Äú–ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤–∞–∫–∞–Ω—Å–∏–∏.‚Äù

**Grade Explanation**  
‚Äú–ö–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –∏–º–µ–µ—Ç —Å–∏–ª—å–Ω—ã–π –æ–ø—ã—Ç –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é.‚Äù


**Pros**  
- 8 –ª–µ—Ç –æ–ø—ã—Ç–∞ –Ω–∞ Python —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ high-load backend  
- –ì–ª—É–±–æ–∫–∏–µ –∑–Ω–∞–Ω–∏—è AWS –∏ Terraform —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—ã—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è  
- –ß—ë—Ç–∫–∞—è –∏ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–ª—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ Aviasales, –æ–ø—ã—Ç –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞ –∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞  

**Cons**  
- (–Ω–µ—Ç)  

# 008 - llm_resume_grader/data/output/candidates_md/–í–∏–∫—Ç–æ—Ä–∏—è_–ü–µ—Ç—Ä–æ–≤–∞.md
**Grade:** C (total_score: 60)  

## –í–∏–∫—Ç–æ—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞

**Company-fit = 30**  
‚Äú–ö–∞–Ω–¥–∏–¥–∞—Ç –∏–º–µ–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç Python –∏ AWS, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—ã—Ç Terraform, —á—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ.‚Äù

**Vacancy-fit = 30**  
‚Äú–ö–∞–Ω–¥–∏–¥–∞—Ç —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, –Ω–æ –æ–ø—ã—Ç —Å Docker –∏ CI/CD –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.‚Äù

**Grade Explanation**  
‚Äú–ö–∞–Ω–¥–∏–¥–∞—Ç –∏–º–µ–µ—Ç –±–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ backend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é, –Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –¥–ª—è Middle —É—Ä–æ–≤–Ω—è.‚Äù


**Pros**  
- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å Python –∏ –±–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç AWS  
- –ß—ë—Ç–∫–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ backend –∏ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ Aviasales  
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ —Ä–µ–∑—é–º–µ —Å –ø–ª–∞–Ω–∞–º–∏ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ  

**Cons**  
- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—ã—Ç —Å Terraform  
- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–ø—ã—Ç —Å FastAPI –∏ Docker –¥–ª—è Middle —É—Ä–æ–≤–Ω—è  
- –ù–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ CI/CD –æ–ø—ã—Ç–µ  

# 009 - llm_resume_grader/data/output/candidates_md/–ú–∏—Ö–∞–∏–ª_–ò–≤–∞–Ω–æ–≤.md
**Grade:** A (total_score: 93)  

## –ú–∏—Ö–∞–∏–ª –ò–≤–∞–Ω–æ–≤

**Company-fit = 48**  
‚Äú–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±—â–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ–±–µ–ª –≤ –æ–ø—ã—Ç–µ Terraform –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç—Å—è –∂–µ–ª–∞–Ω–∏–µ–º —É—á–∏—Ç—å—Å—è.‚Äù

**Vacancy-fit = 45**  
‚Äú–•–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ–±–µ–ª –ø–æ Kubernetes –∏ Terraform.‚Äù

**Grade Explanation**  
‚Äú–ö–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏, –º–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –æ–ø—ã—Ç —Ö–æ—Ä–æ—à–æ –≤—ã—Ä–∞–∂–µ–Ω—ã.‚Äù


**Pros**  
- 5 –ª–µ—Ç –æ–ø—ã—Ç–∞ backend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FastAPI –∏ PostgreSQL  
- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å AWS (EC2, RDS) –∏ CI/CD (GitLab CI)  
- –ß—ë—Ç–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ  

**Cons**  
- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –æ–ø—ã—Ç —Å Terraform –∏ Kubernetes, –Ω–æ –µ—Å—Ç—å –ø–ª–∞–Ω—ã –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ  

# 010 - llm_resume_grader/data/output/results_summary.md
| Candidate | Grade | Explanation |
|-----------|-------|-------------|
| [–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞](candidates_md/–ê–Ω–Ω–∞_–°–º–∏—Ä–Ω–æ–≤–∞.md) | A | **Grade Explanation**<br>‚Äú–ö–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –∏–º–µ–µ—Ç —Å–∏–ª—å–Ω—ã–π –æ–ø—ã—Ç –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é.‚Äù<br>**Pros**<br>- 8 –ª–µ—Ç –æ–ø—ã—Ç–∞ –Ω–∞ Python —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ high-load backend<br>- –ì–ª—É–±–æ–∫–∏–µ –∑–Ω–∞–Ω–∏—è AWS –∏ Terraform —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—ã—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è<br>- –ß—ë—Ç–∫–∞—è –∏ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–ª—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ Aviasales, –æ–ø—ã—Ç –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞ –∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞<br>**Cons**<br>- (–Ω–µ—Ç) |
| [–ú–∏—Ö–∞–∏–ª –ò–≤–∞–Ω–æ–≤](candidates_md/–ú–∏—Ö–∞–∏–ª_–ò–≤–∞–Ω–æ–≤.md) | A | **Grade Explanation**<br>‚Äú–ö–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏, –º–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –æ–ø—ã—Ç —Ö–æ—Ä–æ—à–æ –≤—ã—Ä–∞–∂–µ–Ω—ã.‚Äù<br>**Pros**<br>- 5 –ª–µ—Ç –æ–ø—ã—Ç–∞ backend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FastAPI –∏ PostgreSQL<br>- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å AWS (EC2, RDS) –∏ CI/CD (GitLab CI)<br>- –ß—ë—Ç–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ<br>**Cons**<br>- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –æ–ø—ã—Ç —Å Terraform –∏ Kubernetes, –Ω–æ –µ—Å—Ç—å –ø–ª–∞–Ω—ã –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ |
| [–í–∏–∫—Ç–æ—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞](candidates_md/–í–∏–∫—Ç–æ—Ä–∏—è_–ü–µ—Ç—Ä–æ–≤–∞.md) | C | **Grade Explanation**<br>‚Äú–ö–∞–Ω–¥–∏–¥–∞—Ç –∏–º–µ–µ—Ç –±–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ backend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é, –Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –¥–ª—è Middle —É—Ä–æ–≤–Ω—è.‚Äù<br>**Pros**<br>- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å Python –∏ –±–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç AWS<br>- –ß—ë—Ç–∫–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ backend –∏ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ Aviasales<br>- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ —Ä–µ–∑—é–º–µ —Å –ø–ª–∞–Ω–∞–º–∏ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ<br>**Cons**<br>- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—ã—Ç —Å Terraform<br>- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–ø—ã—Ç —Å FastAPI –∏ Docker –¥–ª—è Middle —É—Ä–æ–≤–Ω—è<br>- –ù–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ CI/CD –æ–ø—ã—Ç–µ |

# 011 - llm_resume_grader/main.py
# llm_resume_grader/main.py
#!/usr/bin/env python3
"""
LLM-powered r√©sum√© grader (single-message edition).
Reads inputs from llm_resume_grader/data/input/, writes outputs to llm_resume_grader/data/output/
and generates per-candidate Markdown files in data/output/candidates_md/.
"""

from __future__ import annotations

import os
import json
import logging
import re
import time
from glob import glob
from pathlib import Path
from typing import Any, Dict, List, Optional

import yaml
from dotenv import load_dotenv
from openai import OpenAI, RateLimitError, APIError

# --- —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ ------------------
# –ö–∞—Ç–∞–ª–æ–≥ llm_resume_grader/ ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π ¬´–∫–æ—Ä–µ–Ω—å¬ª –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
BASE_DIR = Path(__file__).resolve().parent          # .../llm_resume_grader

def abs_path(rel: str | Path) -> Path:
    """–°–¥–µ–ª–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ llm_resume_grader/."""
    return (BASE_DIR / rel).resolve()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def setup_logging(level: int = logging.INFO) -> None:
    logging.basicConfig(
        level=level,
        format="%(asctime)s | %(levelname)-8s | %(message)s",
        datefmt="%H:%M:%S",
    )


def load_config(path: str | Path) -> dict:
    with open(path, encoding="utf-8") as fh:
        return yaml.safe_load(fh)


def load_env() -> None:
    load_dotenv(dotenv_path=BASE_DIR / ".env")
    if not os.getenv("OPENAI_API_KEY"):
        raise RuntimeError("OPENAI_API_KEY missing in .env")


def read_text(path: str | Path) -> str:
    with open(path, encoding="utf-8") as fh:
        return fh.read().strip()


def load_system_prompt(path: str | Path) -> str:
    return read_text(path)


def candidate_id(text: str, fallback: str) -> str:
    """
    Extracts "Candidate ID: <ID>" from the text, or uses fallback (filename) if not found.
    """
    match = re.search(r"Candidate ID:\s*([^\s\n]+)", text)
    return match.group(1) if match else fallback


def build_message(sys_prompt: str, cand_doc: str) -> List[Dict[str, str]]:
    """
    Combines the system prompt and candidate Markdown into one chat message sequence.
    """
    return [
        {"role": "system", "content": sys_prompt},
        {"role": "user", "content": f"```markdown\n{cand_doc}\n```"}
    ]


def safe_chat(
    client: OpenAI,
    messages: list[dict[str, str]],
    model: str,
    retry_max: int,
    **params,  # temperature, top_p, max_tokens, ‚Ä¶
) -> str:
    """
    Sends messages to OpenAI Chat API with retries on RateLimitError or APIError.
    """
    for attempt in range(1, retry_max + 1):
        try:
            resp = client.chat.completions.create(
                model=model,
                messages=messages,
                **params,
            )
            return resp.choices[0].message.content
        except (RateLimitError, APIError) as err:
            wait = 1.5 * attempt
            logging.warning(
                "OpenAI error: %s (retry %d/%d, sleep %.1fs)",
                err,
                attempt,
                retry_max,
                wait,
            )
            time.sleep(wait)
    raise RuntimeError("OpenAI failed after retries")


def extract_json_object(raw: str) -> Optional[dict[str, Any]]:
    """
    Pulls first balanced `{‚Ä¶}` object out of a string (Markdown-safe).
    Returns None on failure or if schema is unexpected.
    """
    text = re.sub(r"^```(?:json)?\s*|\s*```$", "", raw.strip(), flags=re.I)
    depth = None
    start = None
    for i, ch in enumerate(text):
        if ch == "{":
            if depth is None:
                depth = 0
                start = i
            depth += 1
        elif ch == "}":
            if depth is not None:
                depth -= 1
                if depth == 0 and start is not None:
                    snippet = text[start : i + 1]
                    try:
                        parsed = json.loads(snippet)
                        required = {
                            "common_checklist",
                            "common_score",
                            "common_score_comment",
                            "local_checklist",
                            "local_score",
                            "local_score_comment",
                            "total_score",
                            "total_score_comment",
                            "grade",
                            "grade_explanation",
                            "comment",
                        }
                        if not required.issubset(parsed.keys()):
                            logging.error(
                                "Unexpected JSON schema: missing fields %s",
                                required - parsed.keys(),
                            )
                            return None
                        return parsed
                    except json.JSONDecodeError as e:
                        logging.warning(
                            "json.parse_failed: %s\nsnippet: %s",
                            e,
                            snippet[:60],
                        )
                        return None
    return None


def extract_grade_expl(answer: str) -> tuple[str, str]:
    """
    Extract "grade" and "grade_explanation" from the model's response.
    If JSON found, use fields; otherwise, fallback to regex parsing of "Grade: X ‚Äì explanation".
    """
    parsed = extract_json_object(answer)
    if parsed is not None:
        grade = parsed.get("grade", "?")
        expl = parsed.get("grade_explanation", "") or parsed.get("explanation", "")
        return grade, expl.strip().replace("\n", " ")
    regex = re.compile(r"Grade:\s*([A-D])\s*[-‚Äì]\s*(.+)", re.IGNORECASE | re.DOTALL)
    m = regex.search(answer)
    if m:
        grade = m.group(1).upper()
        expl = m.group(2).strip()
        return grade, expl
    return "?", answer.strip().replace("\n", " ")


def sanitize_filename(name: str) -> str:
    """
    Replace spaces with underscores and remove characters that cannot appear in filenames.
    """
    return re.sub(r"[^\w\-]", "_", name.replace(" ", "_"))


def render_candidate_md(entry: Dict[str, Any]) -> str:
    """
    Create a per-candidate Markdown file with detailed, human-readable analysis.
    """
    data = entry.get("parsed_response", {})
    candidate = entry["candidate"]
    grade = data.get("grade", entry.get("grade", "?"))
    total_score = data.get("total_score", entry.get("score", 0))

    lines: List[str] = []
    lines.append(f"**Grade:** {grade} (total_score: {total_score})  \n")
    lines.append(f"## {candidate}\n")
    lines.append(f"**Company-fit = {data.get('common_score', 0)}**  ")
    lines.append(f"‚Äú{data.get('common_score_comment', '')}‚Äù\n")
    lines.append(f"**Vacancy-fit = {data.get('local_score', 0)}**  ")
    lines.append(f"‚Äú{data.get('local_score_comment', '')}‚Äù\n")
    lines.append(f"**Grade Explanation**  ")
    lines.append(f"‚Äú{data.get('grade_explanation', '')}‚Äù\n\n")

    lines.append(f"**Pros**  ")
    pros = data.get("comment", {}).get("pros", [])
    if pros:
        for p in pros:
            lines.append(f"- {p}  ")
    else:
        lines.append("- (–Ω–µ—Ç)  ")

    lines.append(f"\n**Cons**  ")
    cons = data.get("comment", {}).get("cons", [])
    if cons:
        for c in cons:
            lines.append(f"- {c}  ")
    else:
        lines.append("- (–Ω–µ—Ç)  ")

    return "\n".join(lines)


def render_md_summary(rows: List[Dict[str, Any]], candidate_md_dir: str = ".") -> str:
    """
    Markdown table with clickable links to per-candidate files (relative to summary's location).
    """
    lines = [
        "| Candidate | Grade | Explanation |",
        "|-----------|-------|-------------|",
    ]
    for r in rows:
        candidate = r["candidate"]
        grade = r["parsed_response"].get("grade", "?") if r.get("parsed_response") else r["grade"]
        data = r.get("parsed_response", {})
        grade_expl = data.get("grade_explanation", "")
        pros = data.get("comment", {}).get("pros", [])
        cons = data.get("comment", {}).get("cons", [])

        expl_lines: List[str] = []
        expl_lines.append(f"**Grade Explanation**<br>‚Äú{grade_expl}‚Äù")
        expl_lines.append(f"<br>**Pros**")
        if pros:
            for p in pros:
                expl_lines.append(f"<br>- {p}")
        else:
            expl_lines.append(f"<br>- (–Ω–µ—Ç)")
        expl_lines.append(f"<br>**Cons**")
        if cons:
            for c in cons:
                expl_lines.append(f"<br>- {c}")
        else:
            expl_lines.append(f"<br>- (–Ω–µ—Ç)")

        explanation_cell = "".join(expl_lines)
        filename = sanitize_filename(candidate) + ".md"
        candidate_link = f"[{candidate}]({candidate_md_dir}/{filename})"
        lines.append(f"| {candidate_link} | {grade} | {explanation_cell} |")

    return "\n".join(lines)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def main() -> None:
    setup_logging()
    cfg = load_config(BASE_DIR / "config.yaml")
    load_env()

    # 1) –°–æ–∑–¥–∞—ë–º –≤—Å–µ –∫–∞—Ç–∞–ª–æ–≥–∏, —É–ø–æ–º—è–Ω—É—Ç—ã–µ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
    for key in ("out_json", "out_md_summary", "out_md_full", "candidate_md_dir"):
        abs_path(cfg["paths"][key]).parent.mkdir(parents=True, exist_ok=True)
    candidate_md_dir = abs_path(cfg["paths"]["candidate_md_dir"])
    candidate_md_dir.mkdir(parents=True, exist_ok=True)      # ‚Üê  ‚ùó –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

    client = OpenAI()

    sys_prompt = load_system_prompt(abs_path(cfg["paths"]["system_prompt"]))
    files = sorted(glob(str(abs_path(cfg["paths"]["candidates_glob"]))))

    results: List[Dict[str, Any]] = []
    for path in files:
        cand_doc = read_text(path)
        cid = candidate_id(cand_doc, Path(path).stem)

        messages = build_message(sys_prompt, cand_doc)
        answer = safe_chat(
            client=client,
            messages=messages,
            model=cfg["llm"]["model"],
            retry_max=cfg["llm"]["retry_max"],
            **cfg["llm"]["params"],
        )

        parsed = extract_json_object(answer)
        grade, expl = extract_grade_expl(answer)
        score = cfg["grading"]["scale"].get(grade, 0)

        entry: Dict[str, Any] = {
            "candidate": cid,
            "grade": grade,
            "score": score,
            "explanation": expl,
            "raw_response": answer,
        }
        if parsed:
            entry["parsed_response"] = parsed

        results.append(entry)
        logging.info("‚úì %s ‚Üí %s", cid, grade)

    sorted_results = sorted(results, key=lambda r: -r["score"])

    # Write results.json into data/output
    full_json = json.dumps(sorted_results, indent=2, ensure_ascii=False)
    abs_path(cfg["paths"]["out_json"]).write_text(full_json, encoding="utf-8")

    # Write per-candidate MD files into data/output/candidates_md
    for r in sorted_results:
        candidate = r["candidate"]
        filename = candidate_md_dir / (sanitize_filename(candidate) + ".md")
        content = render_candidate_md(r)
        Path(filename).write_text(content, encoding="utf-8")

    # Write summary table into data/output/results_summary.md
    # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ = ¬´–ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥ —Ä—è–¥–æ–º —Å summary¬ª
    rel_link = Path(cfg["paths"]["candidate_md_dir"]).name   # "candidates_md"
    summary_md = render_md_summary(sorted_results, candidate_md_dir=rel_link)
    abs_path(cfg["paths"]["out_md_summary"]).write_text(summary_md, encoding="utf-8")


    logging.info("Finished: %d candidates", len(results))


if __name__ == "__main__":
    main()

# 012 - llm_resume_grader/requirements.txt
# llm_resume_grader/requirements.txt
openai==1.12.0
pyyaml
python-dotenv
pytest

